{"version":3,"file":"address.js","sources":["../src/constants.js","../src/uuid.js","../src/address.js"],"sourcesContent":["export const DEFAULT_CRITERIA = {\n  groupBySelectedSlaType: false,\n  groupByAvailableDeliveryWindows: false,\n  slaOptions: false,\n  selectedSla: true,\n  seller: true,\n  shippingEstimate: true,\n  deliveryChannel: true,\n  useMarketplaceItems: true,\n}\n\nexport const PICKUP_IN_STORE = 'pickup-in-point'\nexport const DELIVERY = 'delivery'\nexport const PICKUP = 'pickup'\nexport const TAKE_AWAY = 'take-away'\n\nexport const RESIDENTIAL = 'residential'\nexport const COMMERCIAL = 'commercial'\nexport const GIFT_REGISTRY = 'giftRegistry'\n\nexport const SEARCH = 'search'\n\nexport const SLA_TYPES = {\n  TAKE_AWAY,\n  DELIVERY,\n  PICKUP_IN_STORE,\n}\n","function S4() {\n  return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1)\n}\n\nfunction uuid() {\n  return `${S4() + S4()}-${S4()}-4${S4().substr(\n    0,\n    3\n  )}-${S4()}-${S4()}${S4()}${S4()}`.toLowerCase()\n}\n\nexport default uuid\n","import { PICKUP, SEARCH, GIFT_REGISTRY } from './constants'\nimport uuid from './uuid'\n\n/** PRIVATE **/\n\nfunction getCleanAddressType(addressType) {\n  return addressType && addressType.trim().toLowerCase()\n}\n\nexport function equalsAddressType(addressType1, addressType2) {\n  return getCleanAddressType(addressType1) === getCleanAddressType(addressType2)\n}\n\nexport function getFirstAddressForType(addresses, addressType) {\n  if (!addresses || addresses.length === 0 || !addressType) {\n    return null\n  }\n\n  addressType = getCleanAddressType(addressType)\n\n  const groups = groupByAddressType(addresses)\n  const groupAddresses = groups[addressType]\n  return groupAddresses && groupAddresses.length > 0 ? groupAddresses[0] : null\n}\n\nexport function getFirstAddressOnAnyOfTheseTypes(addresses, addressesTypes) {\n  return addressesTypes.reduce((address, addressType) => {\n    return address || getFirstAddressForType(addresses, addressType)\n  }, null)\n}\n\nexport function getFirstAddressForDelivery(addresses) {\n  if (!addresses || addresses.length === 0) {\n    return null\n  }\n\n  const deliveryAddresses = addresses.filter(address =>\n    isDeliveryAddress(address)\n  )\n\n  return deliveryAddresses && deliveryAddresses.length > 0\n    ? deliveryAddresses[0]\n    : null\n}\n\nexport function getPickupAddress(pickupSla) {\n  return (\n    (pickupSla &&\n      pickupSla.pickupStoreInfo &&\n      pickupSla.pickupStoreInfo.address) ||\n    null\n  )\n}\n\nexport function isCurrentAddressType(address, addressType) {\n  if (address && !address.addressType) {\n    return false\n  }\n  if (address && typeof address.addressType === 'string') {\n    return equalsAddressType(address.addressType, addressType)\n  }\n  return address && equalsAddressType(address.addressType.value, addressType)\n}\n\n/** PUBLIC **/\n\nexport const defaultRequiredAddressFields = [\n  'state',\n  'city',\n  'neighborhood',\n  'street',\n  'number',\n]\n\nexport function isAddressComplete(\n  address,\n  requiredFields = defaultRequiredAddressFields\n) {\n  return !!address && requiredFields.every(field => !!address[field])\n}\n\nexport function isGiftRegistry(address) {\n  return isCurrentAddressType(address, GIFT_REGISTRY)\n}\n\nexport function isPickupAddress(address) {\n  return isCurrentAddressType(address, PICKUP)\n}\n\nexport function isSearchAddress(address) {\n  return isCurrentAddressType(address, SEARCH)\n}\n\nexport function isDeliveryAddress(address) {\n  if (!address || !address.addressType) {\n    return false\n  }\n\n  return !isPickupAddress(address) && !isSearchAddress(address)\n}\n\nexport function addAddressId(address) {\n  if (!address || address.addressId) {\n    return address\n  }\n  return {\n    ...address,\n    addressId: uuid(),\n  }\n}\n\nexport function findAddressIndex(addresses, searchAddress, prop = 'addressId') {\n  if (!addresses || addresses.length === 0 || !searchAddress) {\n    return -1\n  }\n\n  return addresses.findIndex(address => address[prop] === searchAddress[prop])\n}\n\nexport function findAddress(addresses, searchAddress, prop = 'addressId') {\n  if (!addresses || addresses.length === 0 || !searchAddress) {\n    return null\n  }\n\n  return (\n    addresses.find(address => address[prop] === searchAddress[prop]) || null\n  )\n}\n\nexport function findAddressByPostalCode(addresses, searchAddress) {\n  return findAddress(addresses, searchAddress, 'postalCode')\n}\n\nexport function getDeliveryAvailableAddresses(addresses, requiredFields) {\n  if (!addresses || addresses.length === 0) {\n    return []\n  }\n\n  return addresses.filter(address => {\n    return (\n      isAddressComplete(address, requiredFields) && isDeliveryAddress(address)\n    )\n  })\n}\n\nexport function groupByAddressType(addresses) {\n  if (!addresses || addresses.length === 0) {\n    return {}\n  }\n\n  return addresses.reduce((groups, address, index) => {\n    if (address && address.addressType) {\n      const addressType = getCleanAddressType(address.addressType)\n      address.index = index\n      if (!groups[addressType]) {\n        groups[addressType] = []\n      }\n      groups[addressType].push(address)\n    }\n    return groups\n  }, {})\n}\n\nexport function addOrReplaceAddressTypeOnList(addresses, newAddress) {\n  if (!addresses || !newAddress) {\n    return addresses\n  }\n\n  const newAddresses = [...addresses]\n\n  const address = getFirstAddressForType(newAddresses, newAddress.addressType)\n\n  if (!address) {\n    return [...newAddresses, newAddress]\n  }\n\n  const addressIndex = address.index\n  newAddresses[addressIndex] = {\n    ...newAddresses[addressIndex],\n    ...newAddress,\n  }\n\n  return newAddresses\n}\n\nexport function setDeliveryAddressOnList(addresses, newAddress) {\n  if (!addresses || !newAddress || isPickupAddress(newAddress)) {\n    return addresses\n  }\n\n  const newAddresses = [...addresses]\n\n  const address = getFirstAddressForDelivery(newAddresses)\n\n  if (!address) {\n    return [...newAddresses, newAddress]\n  }\n\n  const addressIndex = findAddressIndex(newAddresses, address)\n  newAddresses[addressIndex] = {\n    ...newAddresses[addressIndex],\n    ...newAddress,\n  }\n\n  return newAddresses\n}\n\nexport function addOrReplaceAddressOnList(addresses, newAddress) {\n  if (!addresses || !newAddress) {\n    return addresses\n  }\n\n  const newAddresses = [...addresses]\n\n  const addressIndex = findAddressIndex(newAddresses, newAddress)\n\n  if (addressIndex === -1) {\n    return [...newAddresses, newAddress]\n  }\n\n  newAddresses[addressIndex] = {\n    ...newAddresses[addressIndex],\n    ...newAddress,\n  }\n\n  return newAddresses\n}\n\nexport function addPickupPointAddresses(addresses, pickupSlas) {\n  if (!addresses || !pickupSlas || pickupSlas.length === 0) {\n    return addresses\n  }\n\n  return pickupSlas.reduce(\n    (newAddresses, pickupSla) => {\n      const pickupAddress = getPickupAddress(pickupSla)\n      const searchAddress = findAddress(addresses, pickupAddress)\n      if (searchAddress) {\n        return newAddresses\n      }\n\n      const newAddress = {\n        ...pickupAddress,\n        addressType: SEARCH,\n      }\n\n      return addOrReplaceAddressOnList(newAddresses, newAddress)\n    },\n    [...addresses]\n  )\n}\n"],"names":["PICKUP","GIFT_REGISTRY","SEARCH","S4","Math","random","toString","substring","uuid","substr","toLowerCase","getCleanAddressType","addressType","trim","equalsAddressType","addressType1","addressType2","getFirstAddressForType","addresses","length","groups","groupByAddressType","groupAddresses","getFirstAddressOnAnyOfTheseTypes","addressesTypes","reduce","address","getFirstAddressForDelivery","deliveryAddresses","filter","isDeliveryAddress","getPickupAddress","pickupSla","pickupStoreInfo","isCurrentAddressType","value","defaultRequiredAddressFields","isAddressComplete","requiredFields","every","field","isGiftRegistry","isPickupAddress","isSearchAddress","addAddressId","addressId","findAddressIndex","searchAddress","prop","findIndex","findAddress","find","findAddressByPostalCode","getDeliveryAvailableAddresses","index","push","addOrReplaceAddressTypeOnList","newAddress","newAddresses","addressIndex","setDeliveryAddressOnList","addOrReplaceAddressOnList","addPickupPointAddresses","pickupSlas","pickupAddress"],"mappings":"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"}