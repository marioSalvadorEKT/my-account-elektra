if (!Array.prototype.findIndex) {
  // eslint-disable-next-line no-extend-native
  Array.prototype.findIndex = function (predicate) {
    if (this === null) {
      throw new TypeError('Array.prototype.findIndex called on null or undefined');
    }
    if (typeof predicate !== 'function') {
      throw new TypeError('predicate must be a function');
    }
    var list = Object(this);
    var length = list.length >>> 0;
    var thisArg = arguments[1];
    var value;

    for (var i = 0; i < length; i++) {
      value = list[i];
      if (predicate.call(thisArg, value, i, list)) {
        return i;
      }
    }
    return -1;
  };
}

if (!Array.prototype.find) {
  // eslint-disable-next-line no-extend-native
  Array.prototype.find = function (predicate) {
    if (this === null) {
      throw new TypeError('Array.prototype.find called on null or undefined');
    }
    if (typeof predicate !== 'function') {
      throw new TypeError('predicate must be a function');
    }
    var list = Object(this);
    var i = list.findIndex(predicate);
    return list[i];
  };
}

if (!Array.isArray) {
  Array.isArray = function (arg) {
    return Object.prototype.toString.call(arg) === '[object Array]';
  };
}

var PICKUP_IN_STORE = 'pickup-in-point';
var DELIVERY = 'delivery';
var PICKUP = 'pickup';

var SEARCH = 'search';

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  } else {
    return Array.from(arr);
  }
};

/** PRIVATE **/

function getCleanAddressType(addressType) {
  return addressType && addressType.trim().toLowerCase();
}

function equalsAddressType(addressType1, addressType2) {
  return getCleanAddressType(addressType1) === getCleanAddressType(addressType2);
}

function getFirstAddressForDelivery(addresses) {
  if (!addresses || addresses.length === 0) {
    return null;
  }

  var deliveryAddresses = addresses.filter(function (address) {
    return isDeliveryAddress(address);
  });

  return deliveryAddresses && deliveryAddresses.length > 0 ? deliveryAddresses[0] : null;
}

function getPickupAddress(pickupSla) {
  return pickupSla && pickupSla.pickupStoreInfo && pickupSla.pickupStoreInfo.address || null;
}

function isCurrentAddressType(address, addressType) {
  if (address && !address.addressType) {
    return false;
  }
  if (address && typeof address.addressType === 'string') {
    return equalsAddressType(address.addressType, addressType);
  }
  return address && equalsAddressType(address.addressType.value, addressType);
}

function isPickupAddress(address) {
  return isCurrentAddressType(address, PICKUP);
}

function isSearchAddress(address) {
  return isCurrentAddressType(address, SEARCH);
}

function isDeliveryAddress(address) {
  if (!address || !address.addressType) {
    return false;
  }

  return !isPickupAddress(address) && !isSearchAddress(address);
}

function findAddressIndex(addresses, searchAddress) {
  var prop = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'addressId';

  if (!addresses || addresses.length === 0 || !searchAddress) {
    return -1;
  }

  return addresses.findIndex(function (address) {
    return address[prop] === searchAddress[prop];
  });
}

function findAddress(addresses, searchAddress) {
  var prop = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'addressId';

  if (!addresses || addresses.length === 0 || !searchAddress) {
    return null;
  }

  return addresses.find(function (address) {
    return address[prop] === searchAddress[prop];
  }) || null;
}

function addOrReplaceAddressOnList(addresses, newAddress) {
  if (!addresses || !newAddress) {
    return addresses;
  }

  var newAddresses = [].concat(toConsumableArray(addresses));

  var addressIndex = findAddressIndex(newAddresses, newAddress);

  if (addressIndex === -1) {
    return [].concat(toConsumableArray(newAddresses), [newAddress]);
  }

  newAddresses[addressIndex] = _extends({}, newAddresses[addressIndex], newAddress);

  return newAddresses;
}

function addPickupPointAddresses(addresses, pickupSlas) {
  if (!addresses || !pickupSlas || pickupSlas.length === 0) {
    return addresses;
  }

  return pickupSlas.reduce(function (newAddresses, pickupSla) {
    var pickupAddress = getPickupAddress(pickupSla);
    var searchAddress = findAddress(addresses, pickupAddress);
    if (searchAddress) {
      return newAddresses;
    }

    var newAddress = _extends({}, pickupAddress, {
      addressType: SEARCH
    });

    return addOrReplaceAddressOnList(newAddresses, newAddress);
  }, [].concat(toConsumableArray(addresses)));
}

/** PRIVATE **/

function isCurrentChannel(deliveryChannelSource, currentChannel) {
  var deliveryChannel = getDeliveryChannel(deliveryChannelSource);
  return deliveryChannel === currentChannel;
}

/** PUBLIC **/

function getDeliveryChannel(deliveryChannelSource) {
  if (typeof deliveryChannelSource === 'string') {
    return deliveryChannelSource;
  }

  if (!deliveryChannelSource) {
    return null;
  }

  return deliveryChannelSource.deliveryChannel || deliveryChannelSource.selectedDeliveryChannel || deliveryChannelSource.id || null;
}

function isPickup(deliveryChannelSource) {
  return isCurrentChannel(deliveryChannelSource, PICKUP_IN_STORE);
}

function isDelivery(deliveryChannelSource) {
  return isCurrentChannel(deliveryChannelSource, DELIVERY);
}

/** PRIVATE **/

function getItemIndex(item) {
  if (!item) {
    return -1;
  }
  var index = item.index != null ? item.index : item.itemIndex;
  return index != null ? index : -1;
}

function getItemsIndexes(items) {
  var len = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;

  if (!items || items.length === 0) {
    return {
      indexes: [],
      otherIndexes: [],
      indexesMap: {},
      maxIndex: -1
    };
  }

  var indexesMap = {};
  var indexes = [];
  var otherIndexes = [];
  var maxIndex = 0;

  items.forEach(function (item) {
    var itemIndex = getItemIndex(item);
    maxIndex = Math.max(maxIndex, itemIndex);
    if (itemIndex !== -1) {
      indexesMap[itemIndex] = item;
      indexes.push(itemIndex);
    }
  });

  len = Math.max(len, maxIndex);

  for (var index = 0; index < len; index++) {
    if (!indexesMap[index]) {
      otherIndexes.push(index);
    }
  }

  return {
    indexes: indexes,
    otherIndexes: otherIndexes,
    indexesMap: indexesMap,
    maxIndex: maxIndex
  };
}

/** PRIVATE **/

function getSelectedSlaInSlas(item) {
  var selectedSla = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

  selectedSla = selectedSla || item && item.selectedSla;

  if (!item || !item.slas || item.slas.length === 0 || !selectedSla) {
    return null;
  }

  return item.slas && item.slas.find(function (sla) {
    return sla.id === selectedSla;
  });
}

function getSelectedSlaIfMatchSlaId(item, slaId) {
  if (!item || !item.slas || item.slas.length === 0 || !slaId) {
    return null;
  }

  return item.slas.find(function (sla) {
    return sla.id === slaId && sla.id === item.selectedSla;
  }) || null;
}

function getSlaAsId(sla) {
  return sla && sla.id ? sla.id : sla;
}

function hasDeliveryWindows(slas) {
  if (!slas) {
    return false;
  }

  if (!Array.isArray(slas)) {
    slas = [slas];
  }

  return slas.some(function (sla) {
    return sla && sla.availableDeliveryWindows && sla.availableDeliveryWindows.length > 0;
  });
}

/* params = {logisticsInfo, itemIndex, selectedSla} */
function getSelectedSla(params) {
  if (!params) {
    return null;
  }

  var itemIndex = params.itemIndex,
      paramSelectedSla = params.selectedSla,
      logisticsInfo = params.logisticsInfo;


  if (!logisticsInfo || !logisticsInfo[itemIndex]) {
    return null;
  }

  var item = logisticsInfo[itemIndex];

  var selectedSla = paramSelectedSla || item && item.selectedSla;

  if (!selectedSla || !item.slas || item.slas.length === 0) {
    return null;
  }

  return getSelectedSlaInSlas(item, selectedSla);
}

function getSlaObj(slas, slaId) {
  if (!slas || slas.length === 0 || !slaId) {
    return null;
  }

  var slaObj = slas.find(function (sla) {
    return sla && sla.id === slaId;
  });

  return slaObj || null;
}

function filterPickupTypeFromSlas(slas) {
  if (!slas || slas.length === 0) {
    return [];
  }

  return slas.filter(function (sla) {
    return sla && sla.pickupStoreInfo && sla.pickupStoreInfo.isPickupStore;
  });
}

function getSelectedSlas(logisticsInfo) {
  if (!logisticsInfo || logisticsInfo.length === 0) {
    return [];
  }

  return logisticsInfo.map(function (li) {
    var selectedSlaObj = getSelectedSla({
      logisticsInfo: logisticsInfo,
      itemIndex: li.itemIndex
    });

    return selectedSlaObj ? _extends({
      itemIndex: li.itemIndex
    }, selectedSlaObj) : null;
  });
}

function getPickupSelectedSlas(logisticsInfo) {
  var selectedSlas = getSelectedSlas(logisticsInfo);
  return filterPickupTypeFromSlas(selectedSlas);
}

/** PRIVATE **/

function areDeliveryWindowsEquals(deliveryWindow1, deliveryWindow2) {
  if (!deliveryWindow1 || !deliveryWindow2) {
    return false;
  }

  return deliveryWindow1.startDateUtc === deliveryWindow2.startDateUtc && deliveryWindow1.endDateUtc === deliveryWindow2.endDateUtc && deliveryWindow1.price === deliveryWindow2.price && deliveryWindow1.lisPrice === deliveryWindow2.lisPrice && deliveryWindow1.tax === deliveryWindow2.tax;
}

function checkIfHasDeliveryWindow(selectedSla, actionDeliveryWindow) {
  return selectedSla && selectedSla.availableDeliveryWindows.find(function (deliveryWindow) {
    return actionDeliveryWindow && areDeliveryWindowsEquals(deliveryWindow, actionDeliveryWindow);
  });
}

function filterSlaByAvailableDeliveryWindows(sla, availableDeliveryWindows) {
  if (!availableDeliveryWindows) {
    return true;
  }

  return areAvailableDeliveryWindowsEquals(sla.availableDeliveryWindows, availableDeliveryWindows);
}

function getScheduledDeliverySLA(logisticsInfoItem) {
  var availableDeliveryWindows = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

  if (!logisticsInfoItem || !logisticsInfoItem.slas || logisticsInfoItem.slas.length === 0) {
    return null;
  }

  return logisticsInfoItem.slas.find(function (sla) {
    return isDelivery(sla) && hasDeliveryWindows(sla) && filterSlaByAvailableDeliveryWindows(sla, availableDeliveryWindows);
  }) || null;
}

/** PUBLIC **/

function areAvailableDeliveryWindowsEquals(availableDeliveryWindows1, availableDeliveryWindows2) {
  if (!availableDeliveryWindows1 || !availableDeliveryWindows2) {
    return false;
  }

  if (availableDeliveryWindows1.length !== availableDeliveryWindows2.length) {
    return false;
  }

  var deliveryWindowsThatAreEqual = availableDeliveryWindows1.filter(function (deliveryWindow1, index) {
    var deliveryWindow2 = availableDeliveryWindows2[index];
    return areDeliveryWindowsEquals(deliveryWindow1, deliveryWindow2);
  });

  return deliveryWindowsThatAreEqual.length === availableDeliveryWindows1.length;
}

/* action = {selectedSla, deliveryWindow} */
function selectDeliveryWindow(logisticsInfo, action) {
  if (!logisticsInfo || logisticsInfo.length === 0 || !action || !action.slaOption && !action.selectedSla || !action.deliveryWindow) {
    return null;
  }

  return logisticsInfo.map(function (li) {
    if (!li) {
      return li;
    }

    var selectedSlaId = action.selectedSla || action.slaOption;
    var deliveryWindow = action.deliveryWindow;

    var selectedSlaObj = getSelectedSlaIfMatchSlaId(li, selectedSlaId);

    var hasDeliveryWindow = checkIfHasDeliveryWindow(selectedSlaObj, deliveryWindow);

    if (selectedSlaObj && hasDeliveryWindow) {
      return _extends({}, li, {
        slas: li.slas.map(function (sla) {
          return _extends({}, sla, {
            deliveryWindow: sla.id === selectedSlaObj.id ? deliveryWindow : null
          });
        }),
        deliveryWindow: deliveryWindow
      });
    }

    return li;
  });
}

function getFirstScheduledDelivery(logisticsInfo) {
  var availableDeliveryWindows = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

  if (!logisticsInfo || logisticsInfo.length === 0) {
    return null;
  }

  var firstScheduledSla = null;

  logisticsInfo.forEach(function (li) {
    var firstScheduledDeliverySla = getScheduledDeliverySLA(li, availableDeliveryWindows);

    if (firstScheduledDeliverySla && !firstScheduledSla) {
      firstScheduledSla = firstScheduledDeliverySla;
    }
  });

  return firstScheduledSla;
}

/** PRIVATE **/

function getDeliveryWindow(selectedSla, itemLogisticsInfo) {
  if (selectedSla) {
    return selectedSla.deliveryWindow;
  }
  if (itemLogisticsInfo.deliveryWindow) {
    return itemLogisticsInfo.deliveryWindow;
  }
  return undefined;
}

// params: { itemIndex, logisticsInfo }
function getLogisticsInfoData(params) {
  if (!params || !params.logisticsInfo || params.logisticsInfo.length === 0) {
    return null;
  }

  var itemIndex = params.itemIndex,
      logisticsInfo = params.logisticsInfo;


  var selectedSla = getSelectedSla({
    itemIndex: itemIndex,
    logisticsInfo: logisticsInfo
  });

  return {
    selectedSla: logisticsInfo[itemIndex].selectedSla,
    selectedSlaObj: selectedSla,
    shippingEstimate: selectedSla ? selectedSla.shippingEstimate : logisticsInfo[itemIndex].shippingEstimate ? logisticsInfo[itemIndex].shippingEstimate : undefined,
    deliveryWindow: getDeliveryWindow(selectedSla, logisticsInfo[itemIndex]),
    shippingEstimateDate: logisticsInfo[itemIndex].shippingEstimateDate ? logisticsInfo[itemIndex].shippingEstimateDate : selectedSla ? selectedSla.shippingEstimateDate : undefined,
    deliveryChannel: logisticsInfo[itemIndex].selectedDeliveryChannel ? logisticsInfo[itemIndex].selectedDeliveryChannel : selectedSla ? selectedSla.deliveryChannel : undefined,
    deliveryIds: logisticsInfo[itemIndex].deliveryIds,
    slas: logisticsInfo[itemIndex].slas
  };
}

function getPickupFriendlyName(_ref) {
  var itemIndex = _ref.itemIndex,
      logisticsInfo = _ref.logisticsInfo;

  var sla = getSelectedSla({ itemIndex: itemIndex, logisticsInfo: logisticsInfo });
  return sla && sla.pickupStoreInfo && sla.pickupStoreInfo.friendlyName ? sla.pickupStoreInfo.friendlyName : null;
}

function getAddress(_ref2) {
  var itemIndex = _ref2.itemIndex,
      logisticsInfo = _ref2.logisticsInfo,
      selectedAddresses = _ref2.selectedAddresses;

  var addressId = logisticsInfo[itemIndex].addressId;
  return selectedAddresses.find(function (address) {
    return address.addressId === addressId;
  });
}

function hydratePackageWithLogisticsExtraInfo(pkg, logisticsInfo, selectedAddresses) {
  if (!pkg || !pkg.item || !logisticsInfo || logisticsInfo.length === 0 || !selectedAddresses) {
    return pkg || null;
  }

  var itemIndex = pkg.item.index;

  return _extends({}, pkg, {
    address: getAddress({
      itemIndex: itemIndex,
      logisticsInfo: logisticsInfo,
      selectedAddresses: selectedAddresses
    }),
    pickupFriendlyName: getPickupFriendlyName({
      itemIndex: itemIndex,
      logisticsInfo: logisticsInfo
    })
  }, getLogisticsInfoData({
    itemIndex: itemIndex,
    logisticsInfo: logisticsInfo
  }));
}

function replaceAddressIdOnLogisticsInfo(logisticsInfo, selectedAddresses) {
  if (!logisticsInfo || logisticsInfo.length === 0 || !selectedAddresses || selectedAddresses.length === 0) {
    return logisticsInfo;
  }

  return logisticsInfo.map(function (li) {
    var selectedSlaObj = getSlaObj(li.slas, li.selectedSla);
    var deliveryChannel = getDeliveryChannel(selectedSlaObj);

    if (!selectedSlaObj || !deliveryChannel) {
      return li;
    }

    var selectedAddress = null;

    if (isPickup(deliveryChannel)) {
      selectedAddress = getPickupAddress(selectedSlaObj);
    }

    if (isDelivery(deliveryChannel)) {
      selectedAddress = getFirstAddressForDelivery(selectedAddresses);
    }

    return _extends({}, li, {
      addressId: selectedAddress && selectedAddress.addressId || li.addressId
    });
  });
}

function fillGapsInLogisticsInfo(logisticsInfo) {
  var fillWithIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  if (!logisticsInfo || logisticsInfo.length === 0) {
    return [];
  }

  var _getItemsIndexes = getItemsIndexes(logisticsInfo),
      maxIndex = _getItemsIndexes.maxIndex,
      indexesMap = _getItemsIndexes.indexesMap;

  var newLogisticsInfo = [];

  for (var index = 0; index <= maxIndex; index++) {
    if (indexesMap[index]) {
      newLogisticsInfo.push(indexesMap[index]);
    } else {
      if (fillWithIndex) {
        newLogisticsInfo.push({ itemIndex: index });
      } else {
        newLogisticsInfo.push(null);
      }
    }
  }

  return newLogisticsInfo;
}

/** PUBLIC **/

function getNewLogisticsInfo(logisticsInfo, selectedSla) {
  var availableDeliveryWindows = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  selectedSla = getSlaAsId(selectedSla);

  if (!selectedSla || !logisticsInfo || logisticsInfo.length === 0) {
    return logisticsInfo || null;
  }

  return logisticsInfo.map(function (li) {
    if (!li) {
      return li;
    }

    var selectedSlaObj = getSlaObj(li.slas, selectedSla);

    if (!selectedSlaObj || !filterSlaByAvailableDeliveryWindows(selectedSlaObj, availableDeliveryWindows)) {
      return li;
    }

    return _extends({}, li, {
      selectedSla: selectedSla,
      selectedDeliveryChannel: selectedSlaObj.deliveryChannel
    });
  });
}

function getNewLogisticsMatchingSelectedAddresses(logisticsInfo, selectedAddresses) {
  if (!logisticsInfo || logisticsInfo.length === 0) {
    return {
      logisticsInfo: [],
      selectedAddresses: selectedAddresses
    };
  }

  var newSelectedAddresses = addPickupPointAddresses(selectedAddresses, getPickupSelectedSlas(logisticsInfo));

  if (!newSelectedAddresses || newSelectedAddresses.length === 0) {
    return {
      logisticsInfo: logisticsInfo,
      selectedAddresses: []
    };
  }

  var newLogisticsInfo = replaceAddressIdOnLogisticsInfo(logisticsInfo, newSelectedAddresses);

  return {
    logisticsInfo: newLogisticsInfo,
    selectedAddresses: newSelectedAddresses
  };
}

function getNewLogisticsInfoWithSelectedScheduled(logisticsInfo) {
  if (!logisticsInfo || logisticsInfo.length === 0) {
    return null;
  }

  var newLogisticsInfo = [].concat(toConsumableArray(logisticsInfo));

  newLogisticsInfo.forEach(function (li) {
    var selectedSlaObj = getSelectedSla({
      logisticsInfo: newLogisticsInfo,
      itemIndex: li.itemIndex
    });

    if (selectedSlaObj && hasDeliveryWindows(selectedSlaObj)) {
      return;
    }

    var firstScheduledSla = getFirstScheduledDelivery([li]);

    if (firstScheduledSla) {
      newLogisticsInfo[li.itemIndex] = getNewLogisticsInfo(newLogisticsInfo, firstScheduledSla, firstScheduledSla.availableDeliveryWindows)[li.itemIndex];
    }
  });

  return newLogisticsInfo;
}

function filterLogisticsInfo(logisticsInfo, filters) {
  var keepSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  if (!logisticsInfo || logisticsInfo.length === 0) {
    return [];
  }

  var _ref3 = filters || {},
      itemsFilter = _ref3.items;

  var indexes = itemsFilter ? itemsFilter.map(function (item) {
    return typeof item.itemIndex !== 'undefined' ? item.itemIndex : item.index;
  }) : null;

  return indexes ? keepSize ? logisticsInfo.map(function (li) {
    return indexes.indexOf(li.itemIndex) !== -1 ? li : null;
  }) : logisticsInfo.filter(function (li) {
    return indexes.indexOf(li.itemIndex) !== -1;
  }) : logisticsInfo;
}

function mergeLogisticsInfos(logisticsInfo1, logisticsInfo2) {
  if (!logisticsInfo1 || logisticsInfo1.length === 0) {
    return [];
  }

  if (!logisticsInfo2 || logisticsInfo2.length === 0) {
    return logisticsInfo1;
  }

  logisticsInfo1 = fillGapsInLogisticsInfo(logisticsInfo1, false);
  logisticsInfo2 = fillGapsInLogisticsInfo(logisticsInfo2, false);

  var maxLen = Math.max(logisticsInfo1.length, logisticsInfo2.length);

  var newLogisticsInfo = [];

  for (var itemIndex = 0; itemIndex < maxLen; itemIndex++) {
    var newItem = logisticsInfo2[itemIndex] || logisticsInfo1[itemIndex];
    newLogisticsInfo.push(newItem);
  }

  return newLogisticsInfo;
}

function getNewLogisticsInfoWithScheduledDeliveryChoice(logisticsInfo, scheduledDeliveryChoice) {
  var scheduledDeliveryItems = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  if (!logisticsInfo || logisticsInfo.length === 0 || !scheduledDeliveryChoice || !scheduledDeliveryChoice.deliveryWindow || !scheduledDeliveryChoice.selectedSla) {
    return null;
  }

  var deliveryWindow = scheduledDeliveryChoice.deliveryWindow;

  var selectedSla = getSlaAsId(scheduledDeliveryChoice.selectedSla);

  var indexes = scheduledDeliveryItems ? scheduledDeliveryItems.map(function (item) {
    return typeof item.itemIndex !== 'undefined' ? item.itemIndex : item.index;
  }) : null;

  var keepSize = true;
  var itemsLogisticsInfo = filterLogisticsInfo(logisticsInfo, {
    items: scheduledDeliveryItems
  }, keepSize);

  var newItemsLogisticsInfo = getNewLogisticsInfo(itemsLogisticsInfo, selectedSla);

  var newItemsLogisticsInfoWithDeliveryWindow = selectDeliveryWindow(newItemsLogisticsInfo, { selectedSla: selectedSla, deliveryWindow: deliveryWindow });

  return indexes ? logisticsInfo.map(function (li) {
    return newItemsLogisticsInfoWithDeliveryWindow[li.itemIndex] ? newItemsLogisticsInfoWithDeliveryWindow[li.itemIndex] : li;
  }) : newItemsLogisticsInfoWithDeliveryWindow;
}

export { getLogisticsInfoData, hydratePackageWithLogisticsExtraInfo, replaceAddressIdOnLogisticsInfo, fillGapsInLogisticsInfo, getNewLogisticsInfo, getNewLogisticsMatchingSelectedAddresses, getNewLogisticsInfoWithSelectedScheduled, filterLogisticsInfo, mergeLogisticsInfos, getNewLogisticsInfoWithScheduledDeliveryChoice };
//# sourceMappingURL=shipping.esm.js.map
