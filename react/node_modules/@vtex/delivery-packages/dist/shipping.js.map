{"version":3,"file":"shipping.js","sources":["../src/polyfills.js","../src/constants.js","../src/address.js","../src/delivery-channel.js","../src/items.js","../src/sla.js","../src/scheduled-delivery.js","../src/shipping.js"],"sourcesContent":["if (!Array.prototype.findIndex) {\n  // eslint-disable-next-line no-extend-native\n  Array.prototype.findIndex = function(predicate) {\n    if (this === null) {\n      throw new TypeError(\n        'Array.prototype.findIndex called on null or undefined'\n      )\n    }\n    if (typeof predicate !== 'function') {\n      throw new TypeError('predicate must be a function')\n    }\n    var list = Object(this)\n    var length = list.length >>> 0\n    var thisArg = arguments[1]\n    var value\n\n    for (var i = 0; i < length; i++) {\n      value = list[i]\n      if (predicate.call(thisArg, value, i, list)) {\n        return i\n      }\n    }\n    return -1\n  }\n}\n\nif (!Array.prototype.find) {\n  // eslint-disable-next-line no-extend-native\n  Array.prototype.find = function(predicate) {\n    if (this === null) {\n      throw new TypeError('Array.prototype.find called on null or undefined')\n    }\n    if (typeof predicate !== 'function') {\n      throw new TypeError('predicate must be a function')\n    }\n    var list = Object(this)\n    var i = list.findIndex(predicate)\n    return list[i]\n  }\n}\n\nif (!Array.isArray) {\n  Array.isArray = function(arg) {\n    return Object.prototype.toString.call(arg) === '[object Array]'\n  }\n}\n","export const DEFAULT_CRITERIA = {\n  groupBySelectedSlaType: false,\n  groupByAvailableDeliveryWindows: false,\n  slaOptions: false,\n  selectedSla: true,\n  seller: true,\n  shippingEstimate: true,\n  deliveryChannel: true,\n  useMarketplaceItems: true,\n}\n\nexport const PICKUP_IN_STORE = 'pickup-in-point'\nexport const DELIVERY = 'delivery'\nexport const PICKUP = 'pickup'\nexport const TAKE_AWAY = 'take-away'\n\nexport const RESIDENTIAL = 'residential'\nexport const COMMERCIAL = 'commercial'\nexport const GIFT_REGISTRY = 'giftRegistry'\n\nexport const SEARCH = 'search'\n\nexport const SLA_TYPES = {\n  TAKE_AWAY,\n  DELIVERY,\n  PICKUP_IN_STORE,\n}\n","import { PICKUP, SEARCH, GIFT_REGISTRY } from './constants'\nimport uuid from './uuid'\n\n/** PRIVATE **/\n\nfunction getCleanAddressType(addressType) {\n  return addressType && addressType.trim().toLowerCase()\n}\n\nexport function equalsAddressType(addressType1, addressType2) {\n  return getCleanAddressType(addressType1) === getCleanAddressType(addressType2)\n}\n\nexport function getFirstAddressForType(addresses, addressType) {\n  if (!addresses || addresses.length === 0 || !addressType) {\n    return null\n  }\n\n  addressType = getCleanAddressType(addressType)\n\n  const groups = groupByAddressType(addresses)\n  const groupAddresses = groups[addressType]\n  return groupAddresses && groupAddresses.length > 0 ? groupAddresses[0] : null\n}\n\nexport function getFirstAddressOnAnyOfTheseTypes(addresses, addressesTypes) {\n  return addressesTypes.reduce((address, addressType) => {\n    return address || getFirstAddressForType(addresses, addressType)\n  }, null)\n}\n\nexport function getFirstAddressForDelivery(addresses) {\n  if (!addresses || addresses.length === 0) {\n    return null\n  }\n\n  const deliveryAddresses = addresses.filter(address =>\n    isDeliveryAddress(address)\n  )\n\n  return deliveryAddresses && deliveryAddresses.length > 0\n    ? deliveryAddresses[0]\n    : null\n}\n\nexport function getPickupAddress(pickupSla) {\n  return (\n    (pickupSla &&\n      pickupSla.pickupStoreInfo &&\n      pickupSla.pickupStoreInfo.address) ||\n    null\n  )\n}\n\nexport function isCurrentAddressType(address, addressType) {\n  if (address && !address.addressType) {\n    return false\n  }\n  if (address && typeof address.addressType === 'string') {\n    return equalsAddressType(address.addressType, addressType)\n  }\n  return address && equalsAddressType(address.addressType.value, addressType)\n}\n\n/** PUBLIC **/\n\nexport const defaultRequiredAddressFields = [\n  'state',\n  'city',\n  'neighborhood',\n  'street',\n  'number',\n]\n\nexport function isAddressComplete(\n  address,\n  requiredFields = defaultRequiredAddressFields\n) {\n  return !!address && requiredFields.every(field => !!address[field])\n}\n\nexport function isGiftRegistry(address) {\n  return isCurrentAddressType(address, GIFT_REGISTRY)\n}\n\nexport function isPickupAddress(address) {\n  return isCurrentAddressType(address, PICKUP)\n}\n\nexport function isSearchAddress(address) {\n  return isCurrentAddressType(address, SEARCH)\n}\n\nexport function isDeliveryAddress(address) {\n  if (!address || !address.addressType) {\n    return false\n  }\n\n  return !isPickupAddress(address) && !isSearchAddress(address)\n}\n\nexport function addAddressId(address) {\n  if (!address || address.addressId) {\n    return address\n  }\n  return {\n    ...address,\n    addressId: uuid(),\n  }\n}\n\nexport function findAddressIndex(addresses, searchAddress, prop = 'addressId') {\n  if (!addresses || addresses.length === 0 || !searchAddress) {\n    return -1\n  }\n\n  return addresses.findIndex(address => address[prop] === searchAddress[prop])\n}\n\nexport function findAddress(addresses, searchAddress, prop = 'addressId') {\n  if (!addresses || addresses.length === 0 || !searchAddress) {\n    return null\n  }\n\n  return (\n    addresses.find(address => address[prop] === searchAddress[prop]) || null\n  )\n}\n\nexport function findAddressByPostalCode(addresses, searchAddress) {\n  return findAddress(addresses, searchAddress, 'postalCode')\n}\n\nexport function getDeliveryAvailableAddresses(addresses, requiredFields) {\n  if (!addresses || addresses.length === 0) {\n    return []\n  }\n\n  return addresses.filter(address => {\n    return (\n      isAddressComplete(address, requiredFields) && isDeliveryAddress(address)\n    )\n  })\n}\n\nexport function groupByAddressType(addresses) {\n  if (!addresses || addresses.length === 0) {\n    return {}\n  }\n\n  return addresses.reduce((groups, address, index) => {\n    if (address && address.addressType) {\n      const addressType = getCleanAddressType(address.addressType)\n      address.index = index\n      if (!groups[addressType]) {\n        groups[addressType] = []\n      }\n      groups[addressType].push(address)\n    }\n    return groups\n  }, {})\n}\n\nexport function addOrReplaceAddressTypeOnList(addresses, newAddress) {\n  if (!addresses || !newAddress) {\n    return addresses\n  }\n\n  const newAddresses = [...addresses]\n\n  const address = getFirstAddressForType(newAddresses, newAddress.addressType)\n\n  if (!address) {\n    return [...newAddresses, newAddress]\n  }\n\n  const addressIndex = address.index\n  newAddresses[addressIndex] = {\n    ...newAddresses[addressIndex],\n    ...newAddress,\n  }\n\n  return newAddresses\n}\n\nexport function setDeliveryAddressOnList(addresses, newAddress) {\n  if (!addresses || !newAddress || isPickupAddress(newAddress)) {\n    return addresses\n  }\n\n  const newAddresses = [...addresses]\n\n  const address = getFirstAddressForDelivery(newAddresses)\n\n  if (!address) {\n    return [...newAddresses, newAddress]\n  }\n\n  const addressIndex = findAddressIndex(newAddresses, address)\n  newAddresses[addressIndex] = {\n    ...newAddresses[addressIndex],\n    ...newAddress,\n  }\n\n  return newAddresses\n}\n\nexport function addOrReplaceAddressOnList(addresses, newAddress) {\n  if (!addresses || !newAddress) {\n    return addresses\n  }\n\n  const newAddresses = [...addresses]\n\n  const addressIndex = findAddressIndex(newAddresses, newAddress)\n\n  if (addressIndex === -1) {\n    return [...newAddresses, newAddress]\n  }\n\n  newAddresses[addressIndex] = {\n    ...newAddresses[addressIndex],\n    ...newAddress,\n  }\n\n  return newAddresses\n}\n\nexport function addPickupPointAddresses(addresses, pickupSlas) {\n  if (!addresses || !pickupSlas || pickupSlas.length === 0) {\n    return addresses\n  }\n\n  return pickupSlas.reduce(\n    (newAddresses, pickupSla) => {\n      const pickupAddress = getPickupAddress(pickupSla)\n      const searchAddress = findAddress(addresses, pickupAddress)\n      if (searchAddress) {\n        return newAddresses\n      }\n\n      const newAddress = {\n        ...pickupAddress,\n        addressType: SEARCH,\n      }\n\n      return addOrReplaceAddressOnList(newAddresses, newAddress)\n    },\n    [...addresses]\n  )\n}\n","import './polyfills'\nimport { PICKUP_IN_STORE, DELIVERY } from './constants'\n\n/** PRIVATE **/\n\nexport function isCurrentChannel(deliveryChannelSource, currentChannel) {\n  const deliveryChannel = getDeliveryChannel(deliveryChannelSource)\n  return deliveryChannel === currentChannel\n}\n\n/** PUBLIC **/\n\nexport function getDeliveryChannel(deliveryChannelSource) {\n  if (typeof deliveryChannelSource === 'string') {\n    return deliveryChannelSource\n  }\n\n  if (!deliveryChannelSource) {\n    return null\n  }\n\n  return (\n    deliveryChannelSource.deliveryChannel ||\n    deliveryChannelSource.selectedDeliveryChannel ||\n    deliveryChannelSource.id ||\n    null\n  )\n}\n\nexport function isPickup(deliveryChannelSource) {\n  return isCurrentChannel(deliveryChannelSource, PICKUP_IN_STORE)\n}\n\nexport function isDelivery(deliveryChannelSource) {\n  return isCurrentChannel(deliveryChannelSource, DELIVERY)\n}\n\nexport function findChannelById(logisticsInfoItem, deliveryChannelSource) {\n  if (\n    !logisticsInfoItem ||\n    !logisticsInfoItem.deliveryChannels ||\n    logisticsInfoItem.deliveryChannels.length === 0 ||\n    !deliveryChannelSource\n  ) {\n    return null\n  }\n\n  const deliveryChannel = getDeliveryChannel(deliveryChannelSource)\n\n  return (\n    logisticsInfoItem.deliveryChannels.find(\n      liChannel => liChannel.id === deliveryChannel\n    ) || null\n  )\n}\n","import './polyfills'\n\n/** PRIVATE **/\n\nexport function getItemIndex(item) {\n  if (!item) {\n    return -1\n  }\n  const index = item.index != null ? item.index : item.itemIndex\n  return index != null ? index : -1\n}\n\n/** PUBLIC **/\n\nexport function getNewItems(items, changes) {\n  if (!items || items.length === 0 || !changes || changes.length === 0) {\n    return items || null\n  }\n\n  const addedSkusFromChanges = changes.reduce(\n    (acc, change) => acc.concat(change.itemsAdded || []),\n    []\n  )\n\n  const removedSkusFromChanges = changes\n    .reduce((acc, change) => acc.concat(change.itemsRemoved || []), [])\n    .map(item => ({\n      ...item,\n      // Change removedItems to negative quantity so we can sum it later\n      quantity: item.quantity * -1,\n    }))\n\n  const itemsChanged = [...addedSkusFromChanges, ...removedSkusFromChanges]\n\n  return items.reduce((acc, item) => {\n    const itemChanges = itemsChanged.filter(\n      changedItem => changedItem.id === item.id\n    )\n\n    const newItem = itemChanges.reduce(\n      (newItem, changedItem) => ({\n        ...newItem,\n        quantity: newItem.quantity + changedItem.quantity,\n      }),\n      item\n    )\n\n    if (newItem.quantity <= 0) return acc\n\n    return acc.concat(newItem)\n  }, [])\n}\n\n/* params: { items, packages } */\nexport function getDeliveredItems(params) {\n  if (!params || !params.items) {\n    return null\n  }\n\n  const { items, packages } = params\n\n  const deliveredItems = items.reduce(\n    (groups, item) => {\n      const packagesWithItem =\n        packages &&\n        packages.filter(pack =>\n          pack.items.some(packageItem => packageItem.itemIndex === item.index)\n        )\n\n      if (packagesWithItem.length === 0) {\n        groups.toBeDelivered = groups.toBeDelivered.concat({\n          item,\n        })\n\n        return groups\n      }\n\n      const quantityInPackages = packagesWithItem.reduce((total, pack) => {\n        const packageItem = pack.items.find(\n          packageItem => packageItem.itemIndex === item.index\n        )\n\n        return total + packageItem.quantity\n      }, 0)\n\n      const packageDeliveredAllItems = quantityInPackages === item.quantity\n      const quantityLeftToDeliver = item.quantity - quantityInPackages\n\n      if (packageDeliveredAllItems === false && quantityLeftToDeliver > 0) {\n        groups.toBeDelivered = groups.toBeDelivered.concat({\n          item: { ...item, quantity: quantityLeftToDeliver },\n        })\n      }\n      const delivered = packagesWithItem.map(pack => {\n        const packageItem = pack.items.find(\n          packageItem => packageItem.itemIndex === item.index\n        )\n\n        return {\n          package: pack,\n          item: { ...item, quantity: packageItem.quantity },\n        }\n      })\n\n      groups.delivered = groups.delivered.concat(delivered)\n\n      return groups\n    },\n    { delivered: [], toBeDelivered: [] }\n  )\n\n  return deliveredItems\n}\n\nexport function getItemsIndexes(items, len = -1) {\n  if (!items || items.length === 0) {\n    return {\n      indexes: [],\n      otherIndexes: [],\n      indexesMap: {},\n      maxIndex: -1,\n    }\n  }\n\n  const indexesMap = {}\n  const indexes = []\n  const otherIndexes = []\n  let maxIndex = 0\n\n  items.forEach(item => {\n    const itemIndex = getItemIndex(item)\n    maxIndex = Math.max(maxIndex, itemIndex)\n    if (itemIndex !== -1) {\n      indexesMap[itemIndex] = item\n      indexes.push(itemIndex)\n    }\n  })\n\n  len = Math.max(len, maxIndex)\n\n  for (let index = 0; index < len; index++) {\n    if (!indexesMap[index]) {\n      otherIndexes.push(index)\n    }\n  }\n\n  return {\n    indexes,\n    otherIndexes,\n    indexesMap,\n    maxIndex,\n  }\n}\n","import './polyfills'\nimport { isCurrentChannel, isPickup } from './delivery-channel'\nimport { SLA_TYPES } from './constants'\nimport { getCheckInFlagsOnOrder } from './checkin'\n\n/** PRIVATE **/\n\nexport function getSelectedSlaInSlas(item, selectedSla = null) {\n  selectedSla = selectedSla || (item && item.selectedSla)\n\n  if (!item || !item.slas || item.slas.length === 0 || !selectedSla) {\n    return null\n  }\n\n  return item.slas && item.slas.find(sla => sla.id === selectedSla)\n}\n\nexport function getSelectedSlaIfMatchSlaId(item, slaId) {\n  if (!item || !item.slas || item.slas.length === 0 || !slaId) {\n    return null\n  }\n\n  return (\n    item.slas.find(sla => sla.id === slaId && sla.id === item.selectedSla) ||\n    null\n  )\n}\n\nexport function findSlaWithChannel(item, channel) {\n  if (!item || !item.slas || item.slas.length === 0 || !channel) {\n    return null\n  }\n  return item.slas && item.slas.find(sla => isCurrentChannel(sla, channel))\n}\n\nexport function getSlaAsId(sla) {\n  return sla && sla.id ? sla.id : sla\n}\n\n/** PUBLIC **/\n\nexport function hasSLAs(slasSource) {\n  if (slasSource && slasSource.slas) {\n    return !!(slasSource.slas.length > 0)\n  }\n  return !!(slasSource && slasSource.length > 0)\n}\n\nexport function hasDeliveryWindows(slas) {\n  if (!slas) {\n    return false\n  }\n\n  if (!Array.isArray(slas)) {\n    slas = [slas]\n  }\n\n  return slas.some(\n    sla =>\n      sla &&\n      sla.availableDeliveryWindows &&\n      sla.availableDeliveryWindows.length > 0\n  )\n}\n\n/* params = {logisticsInfo, itemIndex, selectedSla} */\nexport function getSelectedSla(params) {\n  if (!params) {\n    return null\n  }\n\n  const { itemIndex, selectedSla: paramSelectedSla, logisticsInfo } = params\n\n  if (!logisticsInfo || !logisticsInfo[itemIndex]) {\n    return null\n  }\n\n  const item = logisticsInfo[itemIndex]\n\n  const selectedSla = paramSelectedSla || (item && item.selectedSla)\n\n  if (!selectedSla || !item.slas || item.slas.length === 0) {\n    return null\n  }\n\n  return getSelectedSlaInSlas(item, selectedSla)\n}\n\nexport function getSlaObj(slas, slaId) {\n  if (!slas || slas.length === 0 || !slaId) {\n    return null\n  }\n\n  const slaObj = slas.find(sla => sla && sla.id === slaId)\n\n  return slaObj || null\n}\n\nexport function getSlaType(slaObj, order) {\n  if (!slaObj) {\n    return null\n  }\n\n  const orderFlags = getCheckInFlagsOnOrder(order)\n\n  if (\n    order &&\n    order.isCheckedIn &&\n    (slaObj.pickupPointId === order.checkedInPickupPointId ||\n      orderFlags.isCheckInOnMasterDataStore)\n  ) {\n    return SLA_TYPES.TAKE_AWAY\n  }\n\n  if (isPickup(slaObj)) {\n    return SLA_TYPES.PICKUP_IN_STORE\n  }\n\n  return SLA_TYPES.DELIVERY\n}\n\nexport function excludePickupTypeFromSlas(slas) {\n  if (!slas || slas.length === 0) {\n    return []\n  }\n\n  return slas.filter(\n    sla => !sla.pickupStoreInfo || !sla.pickupStoreInfo.isPickupStore\n  )\n}\n\nexport function filterPickupTypeFromSlas(slas) {\n  if (!slas || slas.length === 0) {\n    return []\n  }\n\n  return slas.filter(\n    sla => sla && sla.pickupStoreInfo && sla.pickupStoreInfo.isPickupStore\n  )\n}\n\nexport function getSelectedSlas(logisticsInfo) {\n  if (!logisticsInfo || logisticsInfo.length === 0) {\n    return []\n  }\n\n  return logisticsInfo.map(li => {\n    const selectedSlaObj = getSelectedSla({\n      logisticsInfo,\n      itemIndex: li.itemIndex,\n    })\n\n    return selectedSlaObj\n      ? {\n        itemIndex: li.itemIndex,\n        ...selectedSlaObj,\n      }\n      : null\n  })\n}\n\nexport function getPickupSelectedSlas(logisticsInfo) {\n  const selectedSlas = getSelectedSlas(logisticsInfo)\n  return filterPickupTypeFromSlas(selectedSlas)\n}\n\nexport function changeSelectedSla(logisticsInfoItem, sla) {\n  if (!logisticsInfoItem || !sla) {\n    return logisticsInfoItem\n  }\n  return {\n    ...logisticsInfoItem,\n    selectedSla: sla.id,\n    selectedDeliveryChannel: sla.deliveryChannel,\n  }\n}\n","import './polyfills'\nimport { hasDeliveryWindows, getSelectedSlaIfMatchSlaId } from './sla'\nimport { isDelivery } from './delivery-channel'\n\n/** PRIVATE **/\n\nexport function areDeliveryWindowsEquals(deliveryWindow1, deliveryWindow2) {\n  if (!deliveryWindow1 || !deliveryWindow2) {\n    return false\n  }\n\n  return (\n    deliveryWindow1.startDateUtc === deliveryWindow2.startDateUtc &&\n    deliveryWindow1.endDateUtc === deliveryWindow2.endDateUtc &&\n    deliveryWindow1.price === deliveryWindow2.price &&\n    deliveryWindow1.lisPrice === deliveryWindow2.lisPrice &&\n    deliveryWindow1.tax === deliveryWindow2.tax\n  )\n}\n\nexport function checkIfHasDeliveryWindow(selectedSla, actionDeliveryWindow) {\n  return (\n    selectedSla &&\n    selectedSla.availableDeliveryWindows.find(\n      deliveryWindow =>\n        actionDeliveryWindow &&\n        areDeliveryWindowsEquals(deliveryWindow, actionDeliveryWindow)\n    )\n  )\n}\n\nexport function filterSlaByAvailableDeliveryWindows(\n  sla,\n  availableDeliveryWindows\n) {\n  if (!availableDeliveryWindows) {\n    return true\n  }\n\n  return areAvailableDeliveryWindowsEquals(\n    sla.availableDeliveryWindows,\n    availableDeliveryWindows\n  )\n}\n\nexport function getScheduledDeliverySLA(\n  logisticsInfoItem,\n  availableDeliveryWindows = null\n) {\n  if (\n    !logisticsInfoItem ||\n    !logisticsInfoItem.slas ||\n    logisticsInfoItem.slas.length === 0\n  ) {\n    return null\n  }\n\n  return (\n    logisticsInfoItem.slas.find(\n      sla =>\n        isDelivery(sla) &&\n        hasDeliveryWindows(sla) &&\n        filterSlaByAvailableDeliveryWindows(sla, availableDeliveryWindows)\n    ) || null\n  )\n}\n\n/** PUBLIC **/\n\nexport function areAvailableDeliveryWindowsEquals(\n  availableDeliveryWindows1,\n  availableDeliveryWindows2\n) {\n  if (!availableDeliveryWindows1 || !availableDeliveryWindows2) {\n    return false\n  }\n\n  if (availableDeliveryWindows1.length !== availableDeliveryWindows2.length) {\n    return false\n  }\n\n  const deliveryWindowsThatAreEqual = availableDeliveryWindows1.filter(\n    (deliveryWindow1, index) => {\n      const deliveryWindow2 = availableDeliveryWindows2[index]\n      return areDeliveryWindowsEquals(deliveryWindow1, deliveryWindow2)\n    }\n  )\n\n  return deliveryWindowsThatAreEqual.length === availableDeliveryWindows1.length\n}\n\nexport function checkLogisticsInfoHasScheduledDeliverySla(logisticsInfo) {\n  if (!logisticsInfo || logisticsInfo.length === 0) {\n    return false\n  }\n\n  return logisticsInfo.some(li => {\n    return li.slas.some(sla => hasDeliveryWindows(sla))\n  })\n}\n\nexport function checkLogisticsInfoHasScheduledDeliverySelected(logisticsInfo) {\n  if (!logisticsInfo || logisticsInfo.length === 0) {\n    return false\n  }\n\n  return logisticsInfo.some(li => {\n    const selectedSlaObj = getSelectedSlaIfMatchSlaId(li, li.selectedSla)\n    return hasDeliveryWindows(selectedSlaObj) && !!li.deliveryWindow\n  })\n}\n\n/* action = {selectedSla, deliveryWindow} */\nexport function selectDeliveryWindow(logisticsInfo, action) {\n  if (\n    !logisticsInfo ||\n    logisticsInfo.length === 0 ||\n    !action ||\n    (!action.slaOption && !action.selectedSla) ||\n    !action.deliveryWindow\n  ) {\n    return null\n  }\n\n  return logisticsInfo.map(li => {\n    if (!li) {\n      return li\n    }\n\n    const selectedSlaId = action.selectedSla || action.slaOption\n    const { deliveryWindow } = action\n    const selectedSlaObj = getSelectedSlaIfMatchSlaId(li, selectedSlaId)\n\n    const hasDeliveryWindow = checkIfHasDeliveryWindow(\n      selectedSlaObj,\n      deliveryWindow\n    )\n\n    if (selectedSlaObj && hasDeliveryWindow) {\n      return {\n        ...li,\n        slas: li.slas.map(sla => ({\n          ...sla,\n          deliveryWindow: sla.id === selectedSlaObj.id ? deliveryWindow : null,\n        })),\n        deliveryWindow,\n      }\n    }\n\n    return li\n  })\n}\n\nexport function getFirstScheduledDelivery(\n  logisticsInfo,\n  availableDeliveryWindows = null\n) {\n  if (!logisticsInfo || logisticsInfo.length === 0) {\n    return null\n  }\n\n  let firstScheduledSla = null\n\n  logisticsInfo.forEach(li => {\n    const firstScheduledDeliverySla = getScheduledDeliverySLA(\n      li,\n      availableDeliveryWindows\n    )\n\n    if (firstScheduledDeliverySla && !firstScheduledSla) {\n      firstScheduledSla = firstScheduledDeliverySla\n    }\n  })\n\n  return firstScheduledSla\n}\n","import './polyfills'\nimport {\n  addPickupPointAddresses,\n  getPickupAddress,\n  getFirstAddressForDelivery,\n} from './address'\nimport { isPickup, isDelivery, getDeliveryChannel } from './delivery-channel'\nimport { getItemsIndexes } from './items'\nimport {\n  hasDeliveryWindows,\n  getSelectedSla,\n  getSlaObj,\n  getPickupSelectedSlas,\n  getSlaAsId,\n} from './sla'\nimport {\n  filterSlaByAvailableDeliveryWindows,\n  getFirstScheduledDelivery,\n  selectDeliveryWindow,\n} from './scheduled-delivery'\n\n/** PRIVATE **/\n\nfunction getDeliveryWindow(selectedSla, itemLogisticsInfo) {\n  if (selectedSla) {\n    return selectedSla.deliveryWindow\n  }\n  if (itemLogisticsInfo.deliveryWindow) {\n    return itemLogisticsInfo.deliveryWindow\n  }\n  return undefined\n}\n\n// params: { itemIndex, logisticsInfo }\nexport function getLogisticsInfoData(params) {\n  if (!params || !params.logisticsInfo || params.logisticsInfo.length === 0) {\n    return null\n  }\n\n  const { itemIndex, logisticsInfo } = params\n\n  const selectedSla = getSelectedSla({\n    itemIndex,\n    logisticsInfo,\n  })\n\n  return {\n    selectedSla: logisticsInfo[itemIndex].selectedSla,\n    selectedSlaObj: selectedSla,\n    shippingEstimate: selectedSla\n      ? selectedSla.shippingEstimate\n      : logisticsInfo[itemIndex].shippingEstimate\n        ? logisticsInfo[itemIndex].shippingEstimate\n        : undefined,\n    deliveryWindow: getDeliveryWindow(selectedSla, logisticsInfo[itemIndex]),\n    shippingEstimateDate: logisticsInfo[itemIndex].shippingEstimateDate\n      ? logisticsInfo[itemIndex].shippingEstimateDate\n      : selectedSla\n        ? selectedSla.shippingEstimateDate\n        : undefined,\n    deliveryChannel: logisticsInfo[itemIndex].selectedDeliveryChannel\n      ? logisticsInfo[itemIndex].selectedDeliveryChannel\n      : selectedSla\n        ? selectedSla.deliveryChannel\n        : undefined,\n    deliveryIds: logisticsInfo[itemIndex].deliveryIds,\n    slas: logisticsInfo[itemIndex].slas,\n  }\n}\n\nfunction getPickupFriendlyName({ itemIndex, logisticsInfo }) {\n  const sla = getSelectedSla({ itemIndex, logisticsInfo })\n  return sla && sla.pickupStoreInfo && sla.pickupStoreInfo.friendlyName\n    ? sla.pickupStoreInfo.friendlyName\n    : null\n}\n\nfunction getAddress({ itemIndex, logisticsInfo, selectedAddresses }) {\n  const addressId = logisticsInfo[itemIndex].addressId\n  return selectedAddresses.find(address => address.addressId === addressId)\n}\n\nexport function hydratePackageWithLogisticsExtraInfo(\n  pkg,\n  logisticsInfo,\n  selectedAddresses\n) {\n  if (\n    !pkg ||\n    !pkg.item ||\n    !logisticsInfo ||\n    logisticsInfo.length === 0 ||\n    !selectedAddresses\n  ) {\n    return pkg || null\n  }\n\n  const itemIndex = pkg.item.index\n\n  return {\n    ...pkg,\n    address: getAddress({\n      itemIndex,\n      logisticsInfo,\n      selectedAddresses,\n    }),\n    pickupFriendlyName: getPickupFriendlyName({\n      itemIndex,\n      logisticsInfo,\n    }),\n    ...getLogisticsInfoData({\n      itemIndex,\n      logisticsInfo,\n    }),\n  }\n}\n\nexport function replaceAddressIdOnLogisticsInfo(\n  logisticsInfo,\n  selectedAddresses\n) {\n  if (\n    !logisticsInfo ||\n    logisticsInfo.length === 0 ||\n    !selectedAddresses ||\n    selectedAddresses.length === 0\n  ) {\n    return logisticsInfo\n  }\n\n  return logisticsInfo.map(li => {\n    const selectedSlaObj = getSlaObj(li.slas, li.selectedSla)\n    const deliveryChannel = getDeliveryChannel(selectedSlaObj)\n\n    if (!selectedSlaObj || !deliveryChannel) {\n      return li\n    }\n\n    let selectedAddress = null\n\n    if (isPickup(deliveryChannel)) {\n      selectedAddress = getPickupAddress(selectedSlaObj)\n    }\n\n    if (isDelivery(deliveryChannel)) {\n      selectedAddress = getFirstAddressForDelivery(selectedAddresses)\n    }\n\n    return {\n      ...li,\n      addressId: (selectedAddress && selectedAddress.addressId) || li.addressId,\n    }\n  })\n}\n\nexport function fillGapsInLogisticsInfo(logisticsInfo, fillWithIndex = true) {\n  if (!logisticsInfo || logisticsInfo.length === 0) {\n    return []\n  }\n\n  const { maxIndex, indexesMap } = getItemsIndexes(logisticsInfo)\n\n  const newLogisticsInfo = []\n\n  for (let index = 0; index <= maxIndex; index++) {\n    if (indexesMap[index]) {\n      newLogisticsInfo.push(indexesMap[index])\n    } else {\n      if (fillWithIndex) {\n        newLogisticsInfo.push({ itemIndex: index })\n      } else {\n        newLogisticsInfo.push(null)\n      }\n    }\n  }\n\n  return newLogisticsInfo\n}\n\n/** PUBLIC **/\n\nexport function getNewLogisticsInfo(\n  logisticsInfo,\n  selectedSla,\n  availableDeliveryWindows = null\n) {\n  selectedSla = getSlaAsId(selectedSla)\n\n  if (!selectedSla || !logisticsInfo || logisticsInfo.length === 0) {\n    return logisticsInfo || null\n  }\n\n  return logisticsInfo.map(li => {\n    if (!li) {\n      return li\n    }\n\n    const selectedSlaObj = getSlaObj(li.slas, selectedSla)\n\n    if (\n      !selectedSlaObj ||\n      !filterSlaByAvailableDeliveryWindows(\n        selectedSlaObj,\n        availableDeliveryWindows\n      )\n    ) {\n      return li\n    }\n\n    return {\n      ...li,\n      selectedSla,\n      selectedDeliveryChannel: selectedSlaObj.deliveryChannel,\n    }\n  })\n}\n\nexport function getNewLogisticsMatchingSelectedAddresses(\n  logisticsInfo,\n  selectedAddresses\n) {\n  if (!logisticsInfo || logisticsInfo.length === 0) {\n    return {\n      logisticsInfo: [],\n      selectedAddresses,\n    }\n  }\n\n  const newSelectedAddresses = addPickupPointAddresses(\n    selectedAddresses,\n    getPickupSelectedSlas(logisticsInfo)\n  )\n\n  if (!newSelectedAddresses || newSelectedAddresses.length === 0) {\n    return {\n      logisticsInfo,\n      selectedAddresses: [],\n    }\n  }\n\n  const newLogisticsInfo = replaceAddressIdOnLogisticsInfo(\n    logisticsInfo,\n    newSelectedAddresses\n  )\n\n  return {\n    logisticsInfo: newLogisticsInfo,\n    selectedAddresses: newSelectedAddresses,\n  }\n}\n\nexport function getNewLogisticsInfoWithSelectedScheduled(logisticsInfo) {\n  if (!logisticsInfo || logisticsInfo.length === 0) {\n    return null\n  }\n\n  const newLogisticsInfo = [...logisticsInfo]\n\n  newLogisticsInfo.forEach(li => {\n    const selectedSlaObj = getSelectedSla({\n      logisticsInfo: newLogisticsInfo,\n      itemIndex: li.itemIndex,\n    })\n\n    if (selectedSlaObj && hasDeliveryWindows(selectedSlaObj)) {\n      return\n    }\n\n    const firstScheduledSla = getFirstScheduledDelivery([li])\n\n    if (firstScheduledSla) {\n      newLogisticsInfo[li.itemIndex] = getNewLogisticsInfo(\n        newLogisticsInfo,\n        firstScheduledSla,\n        firstScheduledSla.availableDeliveryWindows\n      )[li.itemIndex]\n    }\n  })\n\n  return newLogisticsInfo\n}\n\nexport function filterLogisticsInfo(logisticsInfo, filters, keepSize = false) {\n  if (!logisticsInfo || logisticsInfo.length === 0) {\n    return []\n  }\n\n  const { items: itemsFilter } = filters || {}\n\n  const indexes = itemsFilter\n    ? itemsFilter.map(\n      item =>\n        typeof item.itemIndex !== 'undefined' ? item.itemIndex : item.index\n    )\n    : null\n\n  return indexes\n    ? keepSize\n      ? logisticsInfo.map(\n        li => (indexes.indexOf(li.itemIndex) !== -1 ? li : null)\n      )\n      : logisticsInfo.filter(li => indexes.indexOf(li.itemIndex) !== -1)\n    : logisticsInfo\n}\n\nexport function mergeLogisticsInfos(logisticsInfo1, logisticsInfo2) {\n  if (!logisticsInfo1 || logisticsInfo1.length === 0) {\n    return []\n  }\n\n  if (!logisticsInfo2 || logisticsInfo2.length === 0) {\n    return logisticsInfo1\n  }\n\n  logisticsInfo1 = fillGapsInLogisticsInfo(logisticsInfo1, false)\n  logisticsInfo2 = fillGapsInLogisticsInfo(logisticsInfo2, false)\n\n  const maxLen = Math.max(logisticsInfo1.length, logisticsInfo2.length)\n\n  const newLogisticsInfo = []\n\n  for (let itemIndex = 0; itemIndex < maxLen; itemIndex++) {\n    const newItem = logisticsInfo2[itemIndex] || logisticsInfo1[itemIndex]\n    newLogisticsInfo.push(newItem)\n  }\n\n  return newLogisticsInfo\n}\n\nexport function getNewLogisticsInfoWithScheduledDeliveryChoice(\n  logisticsInfo,\n  scheduledDeliveryChoice,\n  scheduledDeliveryItems = null\n) {\n  if (\n    !logisticsInfo ||\n    logisticsInfo.length === 0 ||\n    !scheduledDeliveryChoice ||\n    !scheduledDeliveryChoice.deliveryWindow ||\n    !scheduledDeliveryChoice.selectedSla\n  ) {\n    return null\n  }\n\n  const { deliveryWindow } = scheduledDeliveryChoice\n  const selectedSla = getSlaAsId(scheduledDeliveryChoice.selectedSla)\n\n  const indexes = scheduledDeliveryItems\n    ? scheduledDeliveryItems.map(\n      item =>\n        typeof item.itemIndex !== 'undefined' ? item.itemIndex : item.index\n    )\n    : null\n\n  const keepSize = true\n  const itemsLogisticsInfo = filterLogisticsInfo(\n    logisticsInfo,\n    {\n      items: scheduledDeliveryItems,\n    },\n    keepSize\n  )\n\n  const newItemsLogisticsInfo = getNewLogisticsInfo(\n    itemsLogisticsInfo,\n    selectedSla\n  )\n\n  const newItemsLogisticsInfoWithDeliveryWindow = selectDeliveryWindow(\n    newItemsLogisticsInfo,\n    { selectedSla, deliveryWindow }\n  )\n\n  return indexes\n    ? logisticsInfo.map(\n      li =>\n        newItemsLogisticsInfoWithDeliveryWindow[li.itemIndex]\n          ? newItemsLogisticsInfoWithDeliveryWindow[li.itemIndex]\n          : li\n    )\n    : newItemsLogisticsInfoWithDeliveryWindow\n}\n"],"names":["Array","prototype","findIndex","predicate","TypeError","list","Object","length","thisArg","arguments","value","i","call","find","isArray","arg","toString","PICKUP_IN_STORE","DELIVERY","PICKUP","SEARCH","getCleanAddressType","addressType","trim","toLowerCase","equalsAddressType","addressType1","addressType2","getFirstAddressForDelivery","addresses","deliveryAddresses","filter","isDeliveryAddress","address","getPickupAddress","pickupSla","pickupStoreInfo","isCurrentAddressType","isPickupAddress","isSearchAddress","findAddressIndex","searchAddress","prop","findAddress","addOrReplaceAddressOnList","newAddress","newAddresses","addressIndex","addPickupPointAddresses","pickupSlas","reduce","pickupAddress","isCurrentChannel","deliveryChannelSource","currentChannel","deliveryChannel","getDeliveryChannel","selectedDeliveryChannel","id","isPickup","isDelivery","getItemIndex","item","index","itemIndex","getItemsIndexes","items","len","indexesMap","indexes","otherIndexes","maxIndex","forEach","Math","max","push","getSelectedSlaInSlas","selectedSla","slas","sla","getSelectedSlaIfMatchSlaId","slaId","getSlaAsId","hasDeliveryWindows","some","availableDeliveryWindows","getSelectedSla","params","paramSelectedSla","logisticsInfo","getSlaObj","slaObj","filterPickupTypeFromSlas","isPickupStore","getSelectedSlas","map","selectedSlaObj","li","getPickupSelectedSlas","selectedSlas","areDeliveryWindowsEquals","deliveryWindow1","deliveryWindow2","startDateUtc","endDateUtc","price","lisPrice","tax","checkIfHasDeliveryWindow","actionDeliveryWindow","deliveryWindow","filterSlaByAvailableDeliveryWindows","areAvailableDeliveryWindowsEquals","getScheduledDeliverySLA","logisticsInfoItem","availableDeliveryWindows1","availableDeliveryWindows2","deliveryWindowsThatAreEqual","selectDeliveryWindow","action","slaOption","selectedSlaId","hasDeliveryWindow","getFirstScheduledDelivery","firstScheduledSla","firstScheduledDeliverySla","getDeliveryWindow","itemLogisticsInfo","undefined","getLogisticsInfoData","shippingEstimate","shippingEstimateDate","deliveryIds","getPickupFriendlyName","friendlyName","getAddress","selectedAddresses","addressId","hydratePackageWithLogisticsExtraInfo","pkg","replaceAddressIdOnLogisticsInfo","selectedAddress","fillGapsInLogisticsInfo","fillWithIndex","newLogisticsInfo","getNewLogisticsInfo","getNewLogisticsMatchingSelectedAddresses","newSelectedAddresses","getNewLogisticsInfoWithSelectedScheduled","filterLogisticsInfo","filters","keepSize","itemsFilter","indexOf","mergeLogisticsInfos","logisticsInfo1","logisticsInfo2","maxLen","newItem","getNewLogisticsInfoWithScheduledDeliveryChoice","scheduledDeliveryChoice","scheduledDeliveryItems","itemsLogisticsInfo","newItemsLogisticsInfo","newItemsLogisticsInfoWithDeliveryWindow"],"mappings":"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"}