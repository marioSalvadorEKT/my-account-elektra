'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

if (!Array.prototype.findIndex) {
  // eslint-disable-next-line no-extend-native
  Array.prototype.findIndex = function (predicate) {
    if (this === null) {
      throw new TypeError('Array.prototype.findIndex called on null or undefined');
    }
    if (typeof predicate !== 'function') {
      throw new TypeError('predicate must be a function');
    }
    var list = Object(this);
    var length = list.length >>> 0;
    var thisArg = arguments[1];
    var value;

    for (var i = 0; i < length; i++) {
      value = list[i];
      if (predicate.call(thisArg, value, i, list)) {
        return i;
      }
    }
    return -1;
  };
}

if (!Array.prototype.find) {
  // eslint-disable-next-line no-extend-native
  Array.prototype.find = function (predicate) {
    if (this === null) {
      throw new TypeError('Array.prototype.find called on null or undefined');
    }
    if (typeof predicate !== 'function') {
      throw new TypeError('predicate must be a function');
    }
    var list = Object(this);
    var i = list.findIndex(predicate);
    return list[i];
  };
}

if (!Array.isArray) {
  Array.isArray = function (arg) {
    return Object.prototype.toString.call(arg) === '[object Array]';
  };
}

var PICKUP_IN_STORE = 'pickup-in-point';
var DELIVERY = 'delivery';
var TAKE_AWAY = 'take-away';

var SLA_TYPES = {
  TAKE_AWAY: TAKE_AWAY,
  DELIVERY: DELIVERY,
  PICKUP_IN_STORE: PICKUP_IN_STORE
};

/** PRIVATE **/

function isCurrentChannel(deliveryChannelSource, currentChannel) {
  var deliveryChannel = getDeliveryChannel(deliveryChannelSource);
  return deliveryChannel === currentChannel;
}

/** PUBLIC **/

function getDeliveryChannel(deliveryChannelSource) {
  if (typeof deliveryChannelSource === 'string') {
    return deliveryChannelSource;
  }

  if (!deliveryChannelSource) {
    return null;
  }

  return deliveryChannelSource.deliveryChannel || deliveryChannelSource.selectedDeliveryChannel || deliveryChannelSource.id || null;
}

function isPickup(deliveryChannelSource) {
  return isCurrentChannel(deliveryChannelSource, PICKUP_IN_STORE);
}

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var objectProto = Object.prototype;

function isPrototype(value) {
  var Ctor = value && value.constructor;
  var proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;

  return value === proto;
}

var isEmpty = function isEmpty(elm) {
  if (typeof elm === 'number') {
    return false;
  }

  if (!elm) {
    return true;
  }

  if (Array.isArray(elm) && elm.length === 0) {
    return true;
  }

  if ((typeof elm === 'undefined' ? 'undefined' : _typeof(elm)) === 'object' || isPrototype(elm)) {
    return !Object.keys(elm).length;
  }

  return false;
};

var removeEmpty = function removeEmpty(arr) {
  if (isEmpty(arr)) {
    return [];
  }

  return arr.filter(function (elm) {
    return !isEmpty(elm);
  });
};

function isCheckedIn(order) {
  return !!(order && order.isCheckedIn);
}

function isPickupCheckedIn(order) {
  return !!(order && order.checkedInPickupPointId);
}

function getCheckInFlagsOnOrder(order) {
  if (!order || typeof order.isCheckedIn === 'undefined') {
    return {};
  }

  var isCheckInOnPickupPoint = isCheckedIn(order) && isPickupCheckedIn(order);
  var isCheckInOnMasterDataStore = isCheckedIn(order) && !isPickupCheckedIn(order);

  var logisticsInfoWithCheckInSelected = isCheckInOnPickupPoint ? getLogisticsInfoFilteredByCheckIn(order) : null;
  var isDeliveryOnly = !isCheckedIn(order) || isCheckInOnPickupPoint && !!logisticsInfoWithCheckInSelected && logisticsInfoWithCheckInSelected.length === 0;

  return {
    isDeliveryOnly: isDeliveryOnly,
    isCheckInOnMasterDataStore: isCheckInOnMasterDataStore,
    isCheckInOnPickupPoint: isCheckInOnPickupPoint
  };
}

function filterSlasPerCheckIn(slas, order) {
  slas = removeEmpty(slas);
  if (slas.length === 0 || !order) {
    return [];
  }

  return slas.filter(function (sla) {
    return sla.pickupPointId === order.checkedInPickupPointId;
  });
}

function getLogisticsInfoFilteredByCheckIn(order) {
  if (!order || !order.shippingData || !order.shippingData.logisticsInfo) {
    return [];
  }

  var logisticsInfo = order.shippingData.logisticsInfo;

  var slas = getSelectedSlas(logisticsInfo);
  var checkedInSlas = filterSlasPerCheckIn(slas, order);

  if (checkedInSlas.length === 0) {
    return [];
  }

  var checkedInSlasMap = {};
  checkedInSlas.forEach(function (sla) {
    checkedInSlasMap[sla.itemIndex] = sla;
  });

  return logisticsInfo.filter(function (li) {
    return !!checkedInSlasMap[li.itemIndex];
  });
}

/** PRIVATE **/

function getSelectedSlaInSlas(item) {
  var selectedSla = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

  selectedSla = selectedSla || item && item.selectedSla;

  if (!item || !item.slas || item.slas.length === 0 || !selectedSla) {
    return null;
  }

  return item.slas && item.slas.find(function (sla) {
    return sla.id === selectedSla;
  });
}

function getSelectedSlaIfMatchSlaId(item, slaId) {
  if (!item || !item.slas || item.slas.length === 0 || !slaId) {
    return null;
  }

  return item.slas.find(function (sla) {
    return sla.id === slaId && sla.id === item.selectedSla;
  }) || null;
}

function findSlaWithChannel(item, channel) {
  if (!item || !item.slas || item.slas.length === 0 || !channel) {
    return null;
  }
  return item.slas && item.slas.find(function (sla) {
    return isCurrentChannel(sla, channel);
  });
}

function getSlaAsId(sla) {
  return sla && sla.id ? sla.id : sla;
}

/** PUBLIC **/

function hasSLAs(slasSource) {
  if (slasSource && slasSource.slas) {
    return !!(slasSource.slas.length > 0);
  }
  return !!(slasSource && slasSource.length > 0);
}

function hasDeliveryWindows(slas) {
  if (!slas) {
    return false;
  }

  if (!Array.isArray(slas)) {
    slas = [slas];
  }

  return slas.some(function (sla) {
    return sla && sla.availableDeliveryWindows && sla.availableDeliveryWindows.length > 0;
  });
}

/* params = {logisticsInfo, itemIndex, selectedSla} */
function getSelectedSla(params) {
  if (!params) {
    return null;
  }

  var itemIndex = params.itemIndex,
      paramSelectedSla = params.selectedSla,
      logisticsInfo = params.logisticsInfo;


  if (!logisticsInfo || !logisticsInfo[itemIndex]) {
    return null;
  }

  var item = logisticsInfo[itemIndex];

  var selectedSla = paramSelectedSla || item && item.selectedSla;

  if (!selectedSla || !item.slas || item.slas.length === 0) {
    return null;
  }

  return getSelectedSlaInSlas(item, selectedSla);
}

function getSlaObj(slas, slaId) {
  if (!slas || slas.length === 0 || !slaId) {
    return null;
  }

  var slaObj = slas.find(function (sla) {
    return sla && sla.id === slaId;
  });

  return slaObj || null;
}

function getSlaType(slaObj, order) {
  if (!slaObj) {
    return null;
  }

  var orderFlags = getCheckInFlagsOnOrder(order);

  if (order && order.isCheckedIn && (slaObj.pickupPointId === order.checkedInPickupPointId || orderFlags.isCheckInOnMasterDataStore)) {
    return SLA_TYPES.TAKE_AWAY;
  }

  if (isPickup(slaObj)) {
    return SLA_TYPES.PICKUP_IN_STORE;
  }

  return SLA_TYPES.DELIVERY;
}

function excludePickupTypeFromSlas(slas) {
  if (!slas || slas.length === 0) {
    return [];
  }

  return slas.filter(function (sla) {
    return !sla.pickupStoreInfo || !sla.pickupStoreInfo.isPickupStore;
  });
}

function filterPickupTypeFromSlas(slas) {
  if (!slas || slas.length === 0) {
    return [];
  }

  return slas.filter(function (sla) {
    return sla && sla.pickupStoreInfo && sla.pickupStoreInfo.isPickupStore;
  });
}

function getSelectedSlas(logisticsInfo) {
  if (!logisticsInfo || logisticsInfo.length === 0) {
    return [];
  }

  return logisticsInfo.map(function (li) {
    var selectedSlaObj = getSelectedSla({
      logisticsInfo: logisticsInfo,
      itemIndex: li.itemIndex
    });

    return selectedSlaObj ? _extends({
      itemIndex: li.itemIndex
    }, selectedSlaObj) : null;
  });
}

function getPickupSelectedSlas(logisticsInfo) {
  var selectedSlas = getSelectedSlas(logisticsInfo);
  return filterPickupTypeFromSlas(selectedSlas);
}

function changeSelectedSla(logisticsInfoItem, sla) {
  if (!logisticsInfoItem || !sla) {
    return logisticsInfoItem;
  }
  return _extends({}, logisticsInfoItem, {
    selectedSla: sla.id,
    selectedDeliveryChannel: sla.deliveryChannel
  });
}

exports.getSelectedSlaInSlas = getSelectedSlaInSlas;
exports.getSelectedSlaIfMatchSlaId = getSelectedSlaIfMatchSlaId;
exports.findSlaWithChannel = findSlaWithChannel;
exports.getSlaAsId = getSlaAsId;
exports.hasSLAs = hasSLAs;
exports.hasDeliveryWindows = hasDeliveryWindows;
exports.getSelectedSla = getSelectedSla;
exports.getSlaObj = getSlaObj;
exports.getSlaType = getSlaType;
exports.excludePickupTypeFromSlas = excludePickupTypeFromSlas;
exports.filterPickupTypeFromSlas = filterPickupTypeFromSlas;
exports.getSelectedSlas = getSelectedSlas;
exports.getPickupSelectedSlas = getPickupSelectedSlas;
exports.changeSelectedSla = changeSelectedSla;
//# sourceMappingURL=sla.js.map
