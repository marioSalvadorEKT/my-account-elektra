'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

if (!Array.prototype.findIndex) {
  // eslint-disable-next-line no-extend-native
  Array.prototype.findIndex = function (predicate) {
    if (this === null) {
      throw new TypeError('Array.prototype.findIndex called on null or undefined');
    }
    if (typeof predicate !== 'function') {
      throw new TypeError('predicate must be a function');
    }
    var list = Object(this);
    var length = list.length >>> 0;
    var thisArg = arguments[1];
    var value;

    for (var i = 0; i < length; i++) {
      value = list[i];
      if (predicate.call(thisArg, value, i, list)) {
        return i;
      }
    }
    return -1;
  };
}

if (!Array.prototype.find) {
  // eslint-disable-next-line no-extend-native
  Array.prototype.find = function (predicate) {
    if (this === null) {
      throw new TypeError('Array.prototype.find called on null or undefined');
    }
    if (typeof predicate !== 'function') {
      throw new TypeError('predicate must be a function');
    }
    var list = Object(this);
    var i = list.findIndex(predicate);
    return list[i];
  };
}

if (!Array.isArray) {
  Array.isArray = function (arg) {
    return Object.prototype.toString.call(arg) === '[object Array]';
  };
}

var PICKUP_IN_STORE = 'pickup-in-point';
var DELIVERY = 'delivery';

/** PRIVATE **/

function isCurrentChannel(deliveryChannelSource, currentChannel) {
  var deliveryChannel = getDeliveryChannel(deliveryChannelSource);
  return deliveryChannel === currentChannel;
}

/** PUBLIC **/

function getDeliveryChannel(deliveryChannelSource) {
  if (typeof deliveryChannelSource === 'string') {
    return deliveryChannelSource;
  }

  if (!deliveryChannelSource) {
    return null;
  }

  return deliveryChannelSource.deliveryChannel || deliveryChannelSource.selectedDeliveryChannel || deliveryChannelSource.id || null;
}

function isPickup(deliveryChannelSource) {
  return isCurrentChannel(deliveryChannelSource, PICKUP_IN_STORE);
}

function isDelivery(deliveryChannelSource) {
  return isCurrentChannel(deliveryChannelSource, DELIVERY);
}

function findChannelById(logisticsInfoItem, deliveryChannelSource) {
  if (!logisticsInfoItem || !logisticsInfoItem.deliveryChannels || logisticsInfoItem.deliveryChannels.length === 0 || !deliveryChannelSource) {
    return null;
  }

  var deliveryChannel = getDeliveryChannel(deliveryChannelSource);

  return logisticsInfoItem.deliveryChannels.find(function (liChannel) {
    return liChannel.id === deliveryChannel;
  }) || null;
}

exports.isCurrentChannel = isCurrentChannel;
exports.getDeliveryChannel = getDeliveryChannel;
exports.isPickup = isPickup;
exports.isDelivery = isDelivery;
exports.findChannelById = findChannelById;
//# sourceMappingURL=delivery-channel.js.map
