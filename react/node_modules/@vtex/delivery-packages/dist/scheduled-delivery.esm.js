if (!Array.prototype.findIndex) {
  // eslint-disable-next-line no-extend-native
  Array.prototype.findIndex = function (predicate) {
    if (this === null) {
      throw new TypeError('Array.prototype.findIndex called on null or undefined');
    }
    if (typeof predicate !== 'function') {
      throw new TypeError('predicate must be a function');
    }
    var list = Object(this);
    var length = list.length >>> 0;
    var thisArg = arguments[1];
    var value;

    for (var i = 0; i < length; i++) {
      value = list[i];
      if (predicate.call(thisArg, value, i, list)) {
        return i;
      }
    }
    return -1;
  };
}

if (!Array.prototype.find) {
  // eslint-disable-next-line no-extend-native
  Array.prototype.find = function (predicate) {
    if (this === null) {
      throw new TypeError('Array.prototype.find called on null or undefined');
    }
    if (typeof predicate !== 'function') {
      throw new TypeError('predicate must be a function');
    }
    var list = Object(this);
    var i = list.findIndex(predicate);
    return list[i];
  };
}

if (!Array.isArray) {
  Array.isArray = function (arg) {
    return Object.prototype.toString.call(arg) === '[object Array]';
  };
}

var DELIVERY = 'delivery';

/** PRIVATE **/

function isCurrentChannel(deliveryChannelSource, currentChannel) {
  var deliveryChannel = getDeliveryChannel(deliveryChannelSource);
  return deliveryChannel === currentChannel;
}

/** PUBLIC **/

function getDeliveryChannel(deliveryChannelSource) {
  if (typeof deliveryChannelSource === 'string') {
    return deliveryChannelSource;
  }

  if (!deliveryChannelSource) {
    return null;
  }

  return deliveryChannelSource.deliveryChannel || deliveryChannelSource.selectedDeliveryChannel || deliveryChannelSource.id || null;
}

function isDelivery(deliveryChannelSource) {
  return isCurrentChannel(deliveryChannelSource, DELIVERY);
}

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

function getSelectedSlaIfMatchSlaId(item, slaId) {
  if (!item || !item.slas || item.slas.length === 0 || !slaId) {
    return null;
  }

  return item.slas.find(function (sla) {
    return sla.id === slaId && sla.id === item.selectedSla;
  }) || null;
}

function hasDeliveryWindows(slas) {
  if (!slas) {
    return false;
  }

  if (!Array.isArray(slas)) {
    slas = [slas];
  }

  return slas.some(function (sla) {
    return sla && sla.availableDeliveryWindows && sla.availableDeliveryWindows.length > 0;
  });
}

/** PRIVATE **/

function areDeliveryWindowsEquals(deliveryWindow1, deliveryWindow2) {
  if (!deliveryWindow1 || !deliveryWindow2) {
    return false;
  }

  return deliveryWindow1.startDateUtc === deliveryWindow2.startDateUtc && deliveryWindow1.endDateUtc === deliveryWindow2.endDateUtc && deliveryWindow1.price === deliveryWindow2.price && deliveryWindow1.lisPrice === deliveryWindow2.lisPrice && deliveryWindow1.tax === deliveryWindow2.tax;
}

function checkIfHasDeliveryWindow(selectedSla, actionDeliveryWindow) {
  return selectedSla && selectedSla.availableDeliveryWindows.find(function (deliveryWindow) {
    return actionDeliveryWindow && areDeliveryWindowsEquals(deliveryWindow, actionDeliveryWindow);
  });
}

function filterSlaByAvailableDeliveryWindows(sla, availableDeliveryWindows) {
  if (!availableDeliveryWindows) {
    return true;
  }

  return areAvailableDeliveryWindowsEquals(sla.availableDeliveryWindows, availableDeliveryWindows);
}

function getScheduledDeliverySLA(logisticsInfoItem) {
  var availableDeliveryWindows = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

  if (!logisticsInfoItem || !logisticsInfoItem.slas || logisticsInfoItem.slas.length === 0) {
    return null;
  }

  return logisticsInfoItem.slas.find(function (sla) {
    return isDelivery(sla) && hasDeliveryWindows(sla) && filterSlaByAvailableDeliveryWindows(sla, availableDeliveryWindows);
  }) || null;
}

/** PUBLIC **/

function areAvailableDeliveryWindowsEquals(availableDeliveryWindows1, availableDeliveryWindows2) {
  if (!availableDeliveryWindows1 || !availableDeliveryWindows2) {
    return false;
  }

  if (availableDeliveryWindows1.length !== availableDeliveryWindows2.length) {
    return false;
  }

  var deliveryWindowsThatAreEqual = availableDeliveryWindows1.filter(function (deliveryWindow1, index) {
    var deliveryWindow2 = availableDeliveryWindows2[index];
    return areDeliveryWindowsEquals(deliveryWindow1, deliveryWindow2);
  });

  return deliveryWindowsThatAreEqual.length === availableDeliveryWindows1.length;
}

function checkLogisticsInfoHasScheduledDeliverySla(logisticsInfo) {
  if (!logisticsInfo || logisticsInfo.length === 0) {
    return false;
  }

  return logisticsInfo.some(function (li) {
    return li.slas.some(function (sla) {
      return hasDeliveryWindows(sla);
    });
  });
}

function checkLogisticsInfoHasScheduledDeliverySelected(logisticsInfo) {
  if (!logisticsInfo || logisticsInfo.length === 0) {
    return false;
  }

  return logisticsInfo.some(function (li) {
    var selectedSlaObj = getSelectedSlaIfMatchSlaId(li, li.selectedSla);
    return hasDeliveryWindows(selectedSlaObj) && !!li.deliveryWindow;
  });
}

/* action = {selectedSla, deliveryWindow} */
function selectDeliveryWindow(logisticsInfo, action) {
  if (!logisticsInfo || logisticsInfo.length === 0 || !action || !action.slaOption && !action.selectedSla || !action.deliveryWindow) {
    return null;
  }

  return logisticsInfo.map(function (li) {
    if (!li) {
      return li;
    }

    var selectedSlaId = action.selectedSla || action.slaOption;
    var deliveryWindow = action.deliveryWindow;

    var selectedSlaObj = getSelectedSlaIfMatchSlaId(li, selectedSlaId);

    var hasDeliveryWindow = checkIfHasDeliveryWindow(selectedSlaObj, deliveryWindow);

    if (selectedSlaObj && hasDeliveryWindow) {
      return _extends({}, li, {
        slas: li.slas.map(function (sla) {
          return _extends({}, sla, {
            deliveryWindow: sla.id === selectedSlaObj.id ? deliveryWindow : null
          });
        }),
        deliveryWindow: deliveryWindow
      });
    }

    return li;
  });
}

function getFirstScheduledDelivery(logisticsInfo) {
  var availableDeliveryWindows = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

  if (!logisticsInfo || logisticsInfo.length === 0) {
    return null;
  }

  var firstScheduledSla = null;

  logisticsInfo.forEach(function (li) {
    var firstScheduledDeliverySla = getScheduledDeliverySLA(li, availableDeliveryWindows);

    if (firstScheduledDeliverySla && !firstScheduledSla) {
      firstScheduledSla = firstScheduledDeliverySla;
    }
  });

  return firstScheduledSla;
}

export { areDeliveryWindowsEquals, checkIfHasDeliveryWindow, filterSlaByAvailableDeliveryWindows, getScheduledDeliverySLA, areAvailableDeliveryWindowsEquals, checkLogisticsInfoHasScheduledDeliverySla, checkLogisticsInfoHasScheduledDeliverySelected, selectDeliveryWindow, getFirstScheduledDelivery };
//# sourceMappingURL=scheduled-delivery.esm.js.map
